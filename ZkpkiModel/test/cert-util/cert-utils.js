const assert = require("assert").strict;
const certUtil = require("../../lib/cert-util");

describe("Cert Util Conversions",
    function() {
        it("Beautify DN String",
            async function beautifyDnString() {
                assert.deepEqual(certUtil.conversions.beautifyDnString("cn=foo"), "CN=foo", "Single DN Part");
                assert.deepEqual(certUtil.conversions.beautifyDnString("Cn=foo"), "CN=foo", "Camel DN Type");
                assert.deepEqual(certUtil.conversions.beautifyDnString("cn=Capitalized Name"),
                    "CN=Capitalized Name",
                    "Capitalized Name");
                assert.deepEqual(certUtil.conversions.beautifyDnString("cn=dan,o=zkpki,c=US"),
                    "CN=dan,O=zkpki,C=US",
                    "Multipart DN");
                assert.deepEqual(certUtil.conversions.beautifyDnString("cn=dan ,o= zkpki, c =US"),
                    "CN=dan,O=zkpki,C=US",
                    "Multipart DN with leading and trailing spaces");
                assert.deepEqual(certUtil.conversions.beautifyDnString("cn=peterson\\,dan,o=zkpki,c=US"),
                    "CN=peterson\\,dan,O=zkpki,C=US",
                    "Multipart DN with escaped comma");
            });

        it("DN String to DN Data Types and Values",
            async function dnStringToDnTypesAndValues() {
                const testDn = "C=value,O=value,OU=value,DNQUALIFIER=value,ST=value,S=value,CN=value,SERIALNUMBER=value,L=value,TITLE=value,T=value,SN=value,G=value,I=value,2.5.4.65=value,2.5.4.44=value,DC=value,E=value,UID=value,UNSTRUCTUREDNAME=value";
                dnTypesAndValues = certUtil.conversions.dnStringToDnTypesAndValues(testDn);
                assert.equal(dnTypesAndValues.length, 20);
                assert.deepEqual(dnTypesAndValues[0].type, "1.2.840.113549.1.9.2");
                assert.deepEqual(dnTypesAndValues[1].type, "0.9.2342.19200300.100.1.1");
                assert.deepEqual(dnTypesAndValues[2].type, "1.2.840.113549.1.9.1");
                assert.deepEqual(dnTypesAndValues[3].type, "0.9.2342.19200300.100.1.25");
                assert.deepEqual(dnTypesAndValues[4].type, "2.5.4.44");
                assert.deepEqual(dnTypesAndValues[5].type, "2.5.4.65");
                assert.deepEqual(dnTypesAndValues[6].type, "2.5.4.43");
                assert.deepEqual(dnTypesAndValues[7].type, "2.5.4.42");
                assert.deepEqual(dnTypesAndValues[8].type, "2.5.4.4");
                assert.deepEqual(dnTypesAndValues[9].type, "2.5.4.12");
                assert.deepEqual(dnTypesAndValues[10].type, "2.5.4.12");
                assert.deepEqual(dnTypesAndValues[11].type, "2.5.4.7",);
                assert.deepEqual(dnTypesAndValues[12].type, "2.5.4.5");
                assert.deepEqual(dnTypesAndValues[13].type, "2.5.4.3");
                assert.deepEqual(dnTypesAndValues[14].type, "2.5.4.8");
                assert.deepEqual(dnTypesAndValues[15].type, "2.5.4.8");
                assert.deepEqual(dnTypesAndValues[16].type, "2.5.4.46");
                assert.deepEqual(dnTypesAndValues[17].type, "2.5.4.11");
                assert.deepEqual(dnTypesAndValues[18].type, "2.5.4.10");
                assert.deepEqual(dnTypesAndValues[19].type, "2.5.4.6");

                const badDn = "FIRSTNAME=matt,LASTNAME=peterson";
                assert.throws(() => certUtil.conversions.dnStringToDnTypesAndValues(badDn), Error);
            });

        it("DN Types and Values to DN String",
            async function dnTypesAndValuesToDnString() {
                const testDn = "C=value,O=value,OU=value,DNQUALIFIER=value,ST=value,S=value,CN=value,SERIALNUMBER=value,L=value,TITLE=value,T=value,SN=value,G=value,I=value,2.5.4.65=value,2.5.4.44=value,DC=value,E=value,UID=value,UNSTRUCTUREDNAME=value";
                dnTypesAndValues = certUtil.conversions.dnStringToDnTypesAndValues(testDn);
                const convertedDn = certUtil.conversions.dnTypesAndValuesToDnString(dnTypesAndValues);
                assert.deepEqual(convertedDn, "C=value,O=value,OU=value,DNQUALIFIER=value,S=value,S=value,CN=value,SERIALNUMBER=value,L=value,T=value,T=value,SN=value,G=value,I=value,2.5.4.65=value,2.5.4.44=value,DC=value,E=value,UID=value,UNSTRUCTUREDNAME=value");

                // Test that we catch bad OIDs
                dnTypesAndValues[0].type = "1.2.3.4";
                assert.throws(() => certUtil.conversions.dnTypesAndValuesToDnString(dnTypesAndValues), Error);
            });

        it("Get Certificate Date Range",
            async function getCertificateDateRange() {
                var dateRange = certUtil.conversions.getCertificateDateRange(1);
                assert.equal(dateRange.length, 2);
                var today = dateRange[0].valueOf();
                var expires = dateRange[1].valueOf();
                assert.equal(expires - today, 86400000);
            });

        it("Algorithm OID To Algorithm Name",
            async function algorithmOidToAlgorithmName() {
                assert.deepEqual(certUtil.conversions.algorithmOidToAlgorithmName("1.2.840.113549.1.1.1"), "RSASSA-PKCS1-v1_5");
                assert.deepEqual(certUtil.conversions.algorithmOidToAlgorithmName("1.2.840.113549.1.1.10"), "RSA-PSS");
                assert.deepEqual(certUtil.conversions.algorithmOidToAlgorithmName("1.2.840.10045.2.1"), "ECDSA");
                assert.throws(() => certUtil.conversions.algorithmOidToAlgorithmName("1.2.3.4"), Error);        
            });

        const pemString = `-----BEGIN CERTIFICATE-----\r
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\r
OYw=\r
-----END CERTIFICATE-----`;
        const berArrayBuffer = new Uint8Array([
            0x30, 0x82, 0x05, 0xCE, 0x30, 0x82, 0x03, 0xB6, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x1A, 0x63, 0x6C, 0x60, 0x65, 0x98, 0x5E, 0x89, 0x43, 0xDE, 0x4F, 0x4E, 0x2C, 0xB5, 0x67, 0x62, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x31, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x03, 0x44, 0x41, 0x4E, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0B, 0x44, 0x41, 0x4E, 0x20, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x43, 0x41, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x36, 0x30, 0x35, 0x31, 0x39, 0x32, 0x32, 0x33, 0x36, 0x31, 0x32, 0x5A, 0x17, 0x0D, 0x33, 0x36, 0x30, 0x35, 0x31, 0x39, 0x32, 0x32, 0x34, 0x36, 0x30, 0x34, 0x5A, 0x30, 0x31, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x0C, 0x30, 0x0A, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x13, 0x03, 0x44, 0x41, 0x4E, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x0B, 0x44, 0x41, 0x4E, 0x20, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x43, 0x41, 0x30, 0x82, 0x02, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0F, 0x00, 0x30, 0x82, 0x02, 0x0A, 0x02, 0x82, 0x02, 0x01, 0x00, 0xF0, 0xCD, 0x35, 0x99, 0x36, 0x80, 0xF3, 0x38, 0x48, 0xFB, 0x4D, 0x9D, 0xD7, 0xFF, 0xDD, 0x6F, 0x45, 0x9D, 0xDA, 0xC1, 0xF8, 0x22, 0x41, 0x22, 0x4A, 0x75, 0x23, 0xC8, 0x9E, 0xCF, 0xE2, 0xF9, 0x41, 0x96, 0xBA, 0xDD, 0x52, 0x5D, 0xF4, 0x15, 0x07, 0xB7, 0x6F, 0x17, 0x06, 0x82, 0x6B, 0x79, 0x46, 0x35, 0x98, 0x6B, 0x38, 0x94, 0xEC, 0xA6, 0x69, 0x0B, 0xAE, 0xA1, 0x4B, 0xDE, 0x65, 0xAF, 0x84, 0x3A, 0x0E, 0x59, 0xCA, 0x5B, 0x64, 0xE0, 0x19, 0x14, 0xBF, 0x43, 0xFC, 0xC1, 0x9B, 0xD0, 0xDA, 0xDE, 0x8B, 0x7B, 0x70, 0x5F, 0x62, 0x61, 0xEA, 0x3C, 0x28, 0x30, 0xF3, 0xE0, 0x48, 0x3E, 0x7C, 0xF1, 0x7E, 0x07, 0x51, 0x1B, 0x22, 0x93, 0x63, 0x36, 0xC4, 0xF0, 0x59, 0x09, 0x4B, 0xC3, 0x0D, 0xF8, 0xFD, 0xF1, 0xE6, 0x92, 0xC0, 0x56, 0xD1, 0xC5, 0x19, 0x1A, 0x5C, 0xDB, 0x9E, 0x1B, 0x94, 0x85, 0x9F, 0xAD, 0xFD, 0x83, 0xAB, 0x79, 0x01, 0x4C, 0x37, 0x48, 0x6A, 0x71, 0xCC, 0x11, 0x04, 0x87, 0x72, 0x66, 0x4A, 0xD4, 0x1B, 0xFA, 0x22, 0xFE, 0x15, 0xBE, 0x86, 0x6A, 0xBE, 0x76, 0x40, 0x42, 0x30, 0x27, 0xFC, 0xD5, 0x99, 0x16, 0xE7, 0x1D, 0x5C, 0x1D, 0x05, 0x01, 0x64, 0xA4, 0x07, 0x4B, 0x5C, 0xEA, 0x3B, 0x60, 0xFF, 0x6A, 0xBA, 0x38, 0xC7, 0xDA, 0xA4, 0x66, 0x8C, 0xBF, 0xA4, 0x48, 0xB9, 0x51, 0xD3, 0xA4, 0x9D, 0xEB, 0x3B, 0x14, 0xF3, 0x91, 0xE1, 0xE0, 0x3E, 0x12, 0xE4, 0xAA, 0xB9, 0x43, 0x9D, 0x91, 0x29, 0xF4, 0x52, 0x95, 0x37, 0x46, 0xFD, 0x5C, 0x8C, 0x48, 0xD4, 0x68, 0xB2, 0x12, 0x52, 0x4F, 0x62, 0xCD, 0x7E, 0x0C, 0x55, 0x93, 0x4C, 0x13, 0xC5, 0xDB, 0xE9, 0x28, 0x3E, 0xA6, 0x27, 0x80, 0x81, 0xFD, 0x09, 0x06, 0x68, 0xB2, 0x8B, 0x52, 0xEB, 0x79, 0xEB, 0x7B, 0x4D, 0xFB, 0xB9, 0xB0, 0x95, 0x57, 0xD4, 0x49, 0xC1, 0xF4, 0x1C, 0x97, 0xAD, 0x63, 0xB8, 0x3B, 0x99, 0x09, 0x89, 0x6F, 0x94, 0xB1, 0x38, 0x45, 0xC3, 0x35, 0x49, 0xF7, 0x24, 0x53, 0x9F, 0x80, 0x14, 0x37, 0xB5, 0x8D, 0xEA, 0x9C, 0xBC, 0x59, 0xF3, 0xA6, 0x8F, 0x01, 0x94, 0x16, 0x0C, 0xBF, 0x39, 0x04, 0x09, 0x18, 0x2C, 0x46, 0xF3, 0x66, 0xC9, 0x42, 0xE4, 0x7B, 0xB1, 0x5C, 0xC1, 0x78, 0x88, 0x7D, 0x5E, 0xEB, 0x55, 0xBB, 0x48, 0x70, 0x99, 0xC8, 0xBA, 0x30, 0x3F, 0x81, 0xFA, 0x2A, 0xEF, 0xF1, 0xFA, 0x9B, 0x69, 0x54, 0x9A, 0x6B, 0x2E, 0x9F, 0xEC, 0x88, 0x67, 0xEB, 0xFD, 0xA6, 0xA5, 0xE7, 0x40, 0x0D, 0xBD, 0x0D, 0xC8, 0xCF, 0x85, 0x59, 0x9F, 0x85, 0xA4, 0x57, 0x3A, 0xBE, 0x1F, 0x64, 0xEA, 0x6E, 0xB6, 0x64, 0x86, 0xFF, 0xC7, 0xDB, 0x64, 0x56, 0x1D, 0x6C, 0xEC, 0x7A, 0xF1, 0x3C, 0x9F, 0x79, 0xFE, 0x77, 0xE3, 0x5B, 0x97, 0x51, 0x69, 0x95, 0x6A, 0x93, 0x67, 0xB2, 0x9D, 0xFA, 0x99, 0x8A, 0x1A, 0x13, 0xC4, 0x76, 0xA0, 0x9F, 0x9D, 0x09, 0x56, 0x8F, 0x33, 0x73, 0x94, 0xC8, 0x07, 0xB0, 0x95, 0x25, 0x65, 0xB1, 0x05, 0x59, 0xC5, 0xF1, 0xAC, 0x3A, 0xC9, 0x2D, 0x01, 0x8C, 0xF1, 0xCF, 0xB9, 0x4A, 0x58, 0xDE, 0xBA, 0xB7, 0x8B, 0x11, 0x7B, 0x1D, 0x4F, 0xCF, 0xE1, 0x96, 0xF3, 0x36, 0xEC, 0x6D, 0xFD, 0x14, 0xD1, 0xD4, 0xD1, 0xA7, 0x1C, 0xC1, 0x3D, 0xA3, 0x27, 0xBA, 0xD9, 0xEA, 0xE3, 0x0D, 0xF4, 0xF2, 0x36, 0x63, 0x30, 0x93, 0xFB, 0xAE, 0xDA, 0x97, 0x7E, 0x74, 0x29, 0xC1, 0x53, 0xBB, 0xBC, 0xF5, 0xFF, 0x31, 0x17, 0x15, 0x06, 0xA0, 0xAD, 0x46, 0x78, 0x34, 0x33, 0x11, 0x2E, 0xCD, 0x05, 0x9C, 0xFD, 0x6E, 0xED, 0x9C, 0x95, 0xD7, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x81, 0xE1, 0x30, 0x81, 0xDE, 0x30, 0x0B, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x04, 0x04, 0x03, 0x02, 0x01, 0x86, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xFF, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0x20, 0xC1, 0x70, 0x4A, 0x75, 0xB1, 0x5A, 0xF7, 0xDA, 0x93, 0x9F, 0xDB, 0xB5, 0x02, 0x2F, 0xBA, 0x78, 0x51, 0xA5, 0x16, 0x30, 0x10, 0x06, 0x09, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x15, 0x01, 0x04, 0x03, 0x02, 0x01, 0x00, 0x30, 0x81, 0x8C, 0x06, 0x03, 0x55, 0x1D, 0x20, 0x04, 0x81, 0x84, 0x30, 0x81, 0x81, 0x30, 0x7F, 0x06, 0x21, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x14, 0x01, 0xBE, 0x40, 0x93, 0x7A, 0xE6, 0x0E, 0x83, 0x8F, 0x68, 0x83, 0xA7, 0x4D, 0x81, 0x80, 0x2E, 0x82, 0xBE, 0x56, 0x85, 0xF7, 0xAB, 0x1E, 0x83, 0xDC, 0xA1, 0x48, 0x30, 0x5A, 0x30, 0x58, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x02, 0x30, 0x4C, 0x1E, 0x4A, 0x00, 0x49, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x67, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x20, 0x00, 0x61, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x63, 0x00, 0x79, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x65, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0xBC, 0xF8, 0xE0, 0xB7, 0x8D, 0xB5, 0x0B, 0x37, 0xAD, 0x13, 0x6D, 0xB4, 0x5F, 0x8C, 0x96, 0x56, 0x65, 0xB3, 0xCC, 0xF6, 0xC6, 0x4D, 0x81, 0xBC, 0xE7, 0x53, 0xDB, 0x95, 0xFB, 0x23, 0x9A, 0xB7, 0x01, 0x5A, 0xB4, 0xA4, 0x6B, 0x75, 0xA1, 0xCC, 0x54, 0x5E, 0x6A, 0xB9, 0xB3, 0x9D, 0x6F, 0x86, 0xF6, 0xA8, 0x63, 0x64, 0xAD, 0x3D, 0x14, 0xBA, 0xC0, 0xAF, 0x78, 0x02, 0xEB, 0xC2, 0x3F, 0x38, 0x04, 0x99, 0x00, 0x0C, 0xA5, 0xF4, 0x24, 0xD6, 0xB2, 0x02, 0xB6, 0xB9, 0x13, 0x25, 0x91, 0x22, 0x90, 0x81, 0x2C, 0xC3, 0x6D, 0xA9, 0x58, 0x27, 0xCD, 0x02, 0xB0, 0x9D, 0x38, 0xDF, 0x59, 0xBE, 0xC2, 0xA5, 0xED, 0x6F, 0xD8, 0x48, 0xE6, 0xFD, 0xF0, 0xDD, 0x75, 0xAD, 0x00, 0x39, 0x83, 0xD7, 0xBB, 0x1D, 0xEE, 0xBB, 0x83, 0xEE, 0x34, 0x64, 0x4C, 0x83, 0x55, 0xD6, 0x3D, 0xA2, 0x9D, 0x3D, 0xF5, 0xA2, 0xA2, 0xE4, 0x11, 0xE6, 0xAF, 0xB7, 0xDA, 0x57, 0xED, 0x0C, 0xF9, 0x59, 0xA3, 0x01, 0x87, 0x27, 0xD2, 0x00, 0x74, 0xEE, 0x66, 0x46, 0x02, 0x6C, 0x17, 0xF7, 0x09, 0x0D, 0x17, 0x97, 0x8A, 0xE3, 0x8E, 0xBD, 0x5C, 0xCA, 0x36, 0x45, 0x88, 0x33, 0xA4, 0xA5, 0x70, 0xA3, 0xA6, 0x4E, 0xFB, 0xD7, 0x3A, 0xA7, 0x16, 0x7A, 0x53, 0xBA, 0x9D, 0xD3, 0x2F, 0xD5, 0xE2, 0x5B, 0x13, 0x1A, 0xA6, 0x41, 0xB3, 0x55, 0x26, 0x52, 0x57, 0xB0, 0xE3, 0x46, 0xB8, 0x33, 0xFD, 0xFD, 0x9A, 0x41, 0x08, 0xB9, 0xB0, 0x3D, 0x6C, 0x95, 0x77, 0xDD, 0x2F, 0x94, 0x9E, 0xFD, 0x7B, 0xAA, 0xE2, 0x93, 0xD0, 0x82, 0x2B, 0x4D, 0xF2, 0x40, 0x86, 0x1D, 0xF3, 0xEC, 0xA0, 0x9A, 0x72, 0x22, 0xFF, 0x61, 0x60, 0xAF, 0xE9, 0x6D, 0x31, 0xD9, 0xF9, 0x7E, 0x45, 0xA0, 0xC4, 0xBD, 0x39, 0x5A, 0xB9, 0x1A, 0x3F, 0x6C, 0x9C, 0x00, 0x78, 0xC0, 0x1D, 0xB4, 0x9F, 0x8B, 0xB7, 0x2A, 0x98, 0x9F, 0x75, 0x68, 0x9E, 0x32, 0x2B, 0x06, 0x30, 0x23, 0xA0, 0x26, 0x17, 0x43, 0x7B, 0xD1, 0xC0, 0xC0, 0x07, 0x89, 0x53, 0x03, 0xFC, 0x4A, 0x36, 0xCC, 0x3B, 0x2C, 0x11, 0xA6, 0x60, 0xA6, 0x4D, 0x5D, 0x47, 0x59, 0x14, 0xC9, 0x02, 0x59, 0x65, 0x29, 0xDB, 0x4B, 0xAF, 0x63, 0xBE, 0xFA, 0x32, 0x9B, 0x2E, 0x5A, 0xFD, 0xC9, 0x6C, 0x24, 0xA0, 0x50, 0xC8, 0xDD, 0xE3, 0x74, 0xA1, 0x81, 0xDA, 0xF4, 0x07, 0xCC, 0x2E, 0x92, 0x32, 0xCC, 0xE3, 0x77, 0x8F, 0x11, 0x8D, 0x21, 0x30, 0xC7, 0xC5, 0x94, 0x8A, 0xBC, 0xEB, 0x2B, 0x90, 0xAE, 0x14, 0x78, 0x54, 0x7C, 0xBA, 0xEE, 0xD6, 0x5C, 0xDB, 0x93, 0x4F, 0xAF, 0x75, 0x18, 0x3E, 0x39, 0xA5, 0xB9, 0xEB, 0xB8, 0xD1, 0xE3, 0xF7, 0xBB, 0xBC, 0xBF, 0x1B, 0xCC, 0xB5, 0x6D, 0x54, 0x54, 0x2A, 0xDA, 0x45, 0xEE, 0xE3, 0xE3, 0xF6, 0xA0, 0x84, 0x8B, 0xA4, 0x6D, 0x59, 0x03, 0xC0, 0xEE, 0xD3, 0xDC, 0x0B, 0xA9, 0x97, 0x9E, 0x95, 0x0F, 0xF0, 0xBF, 0xEA, 0xAE, 0x36, 0xFB, 0x67, 0xAC, 0xF8, 0x68, 0xA6, 0xAF, 0x65, 0xA9, 0x5A, 0xCC, 0xF5, 0x0C, 0x47, 0x86, 0xE0, 0x4D, 0xD9, 0x3B, 0x43, 0x71, 0x54, 0x0E, 0x1C, 0x4E, 0x27, 0xC9, 0xB1, 0x5C, 0x17, 0xFA, 0x62, 0x8A, 0x45, 0xAA, 0xB0, 0x89, 0x1B, 0xA8, 0x23, 0x91, 0xA5, 0xB1, 0xCC, 0x7C, 0xD4, 0x3F, 0xDA, 0x30, 0x5F, 0x81, 0xAE, 0x13, 0x0F, 0x2A, 0x45, 0x12, 0x0A, 0x44, 0x74, 0xB1, 0xA8, 0x2E, 0x00, 0x63, 0xDA, 0x5A, 0xFE, 0x1E, 0x8A, 0x11, 0x8C, 0xA3, 0x95, 0xCC, 0xD7, 0x3E, 0x66, 0x64, 0x33, 0xFB, 0xB1, 0x92, 0x61, 0x43, 0xA6, 0xD3, 0x5D, 0xA9, 0xA8, 0xA0, 0x41, 0xA7, 0x39, 0x8C
        ]).buffer;

        it("BER Array Buffer to PEM String",
            async function () {
                const converted = certUtil.conversions.berToPem("CERTIFICATE", berArrayBuffer);
                assert.deepEqual(converted, pemString, "Same BER contents");
            });

        it("PEM String to BER Array Buffer",
            async function () {
                const converted = certUtil.conversions.pemToBer(pemString);
                assert.deepEqual(converted, berArrayBuffer, "Same BER contents");
            });
    });
